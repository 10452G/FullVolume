{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_2.^beQjx|FGt38A,8(E\">dropPosition</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"-10\"><next><block type=\"iq_motion_set_motor_stopping\" id=\"u]Bk?|cZ-~5/%|i)1Imi\"><field name=\"MOTOR\">LiftMotors</field><field name=\"MODE\">hold</field><next><block type=\"iq_motion_set_motor_velocity\" id=\"TC%G,;*c9`Y3}-IQY6y|\"><field name=\"MOTOR\">LiftMotors</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"#BY($[a}~Lq`VD$ZD_J_\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"TM${z1ZpE0qr!{crFS{L\"><field name=\"MOTOR\">IntakeMotor</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"5lvaYRAK0a@=_R/y?RJ%\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_position\" id=\"68;QOgBLW_3[{6TOAgH0\"><field name=\"MOTOR\">LiftMotors</field><field name=\"UNITS\">deg</field><value name=\"DEGS\"><shadow type=\"math_number\" id=\"[O,7ZuIrjAr.iHXv0ClZ\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"iq_variables_set_variable\" id=\"NJ,7yh8dLMIMJ`p]8tAE\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">dropPosition</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"!iDTIJcLhtbOr)qF:2K;\"><field name=\"NUM\">330</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block><block type=\"iq_events_when_started\" id=\"Al5[y+A4hrK~WkO8yc0O\" disabled=\"true\" x=\"1070\" y=\"-10\"><next><block type=\"iq_control_forever\" id=\"0nW;!OK]vBSybNkCrlMm\"><statement name=\"SUBSTACK\"><block type=\"iq_looks_print_new\" id=\"!YLr8UXJbJMvo`;JOkNP\"><field name=\"TARGET\">Console</field><field name=\"andsetcursortonextrow_mutator\">true</field><value name=\"DATA\"><shadow type=\"text\" id=\"xYEET8[u6~bIz]BSXP]7\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"iq_sensing_position_of_motor\" id=\"{%+PtQ4LqdTL*o!3}JcV\"><field name=\"MOTOR\">LiftMotors</field><field name=\"UNITS\">deg</field></block></value><next><block type=\"iq_control_wait\" id=\"a=itc;Rl)(!Wn5=vuS;P\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"/Cu7;0irs@*LhKw}xPCw\"><field name=\"NUM\">0.5</field></shadow></value></block></next></block></statement></block></next></block><block type=\"iq_events_when_controller_button\" id=\"ja?Nfry/n9f_Bw)nCl[l\" x=\"50\" y=\"350\"><field name=\"BUTTON\">ButtonLUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin\" id=\"IF:$PwM_sCv$(cGf5$UN\"><field name=\"MOTOR\">IntakeMotor</field><field name=\"DIRECTION\">fwd</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"$L.?u!(-p%BLH1o1/20+\" x=\"730\" y=\"350\"><field name=\"BUTTON\">ButtonRUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin_to_position\" id=\"d+I/}|:uU0F7Nb`pL^?9\"><field name=\"MOTOR\">LiftMotors</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"gm}+nEb_9.E#+7lZd6FQ\"><field name=\"NUM\">90</field></shadow><block type=\"iq_variables_variable\" id=\"a?t+DPbR8ZV7FUulP9.?\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">dropPosition</field></block></value></block></next></block><block type=\"iq_events_when_controller_button\" id=\"IYR1RwQ,i[H*rw=Wc!yK\" x=\"110\" y=\"550\"><field name=\"BUTTON\">ButtonLDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_stop_motor\" id=\"tZMiFYdG$,2=tQXuU+]t\"><field name=\"MOTOR\">IntakeMotor</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"33|tUTYK#$rP_v;S2!Sd\" x=\"730\" y=\"550\"><field name=\"BUTTON\">ButtonRDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin_to_position\" id=\"-qP^r;:-s`/ZHE7:b)Z}\"><field name=\"MOTOR\">LiftMotors</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"`F}~/2|GK69~5}3f00DJ\"><field name=\"NUM\">0</field></shadow></value></block></next></block></xml>","rconfig":[{"port":[6,12,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"}},{"port":[1,7],"name":"LiftMotors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"raise","rev":"lower","motor_a_reversed":"true","motor_b_reversed":"false"}},{"port":[8],"name":"IntakeMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"in","rev":"out"}},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"tank"}}],"slot":7,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT6, 1, false);\nmotor RightDriveSmart = motor(PORT12, 1, true);\n\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, BrainInertial, 200);\n\nmotor LiftMotorsMotorA = motor(PORT1, true);\nmotor LiftMotorsMotorB = motor(PORT7, false);\nmotor_group LiftMotors = motor_group(LiftMotorsMotorA, LiftMotorsMotorB);\n\nmotor IntakeMotor = motor(PORT8, false);\ncontroller Controller = controller();\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA\n      // right = AxisD\n      int drivetrainLeftSideSpeed = Controller.AxisA.position();\n      int drivetrainRightSideSpeed = Controller.AxisD.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat dropPosition;\n\n// \"when started\" hat block\nint whenStarted1() {\n  LiftMotors.setStopping(hold);\n  LiftMotors.setVelocity(50.0, percent);\n  IntakeMotor.setVelocity(100.0, percent);\n  LiftMotors.setPosition(0.0, degrees);\n  dropPosition = 330.0;\n  return 0;\n}\n\n// \"when Controller ButtonLUp pressed\" hat block\nvoid onevent_ControllerButtonLUp_pressed_0() {\n  IntakeMotor.spin(forward);\n}\n\n// \"when Controller ButtonRUp pressed\" hat block\nvoid onevent_ControllerButtonRUp_pressed_0() {\n  LiftMotors.spinToPosition(dropPosition, degrees, true);\n}\n\n// \"when Controller ButtonLDown pressed\" hat block\nvoid onevent_ControllerButtonLDown_pressed_0() {\n  IntakeMotor.stop();\n}\n\n// \"when Controller ButtonRDown pressed\" hat block\nvoid onevent_ControllerButtonRDown_pressed_0() {\n  LiftMotors.spinToPosition(0.0, degrees, true);\n}\n\n\nint main() {\n  // Calibrate the Drivetrain Gyro\n  calibrateDrivetrain();\n\n  // register event handlers\n  Controller.ButtonLUp.pressed(onevent_ControllerButtonLUp_pressed_0);\n  Controller.ButtonRUp.pressed(onevent_ControllerButtonRUp_pressed_0);\n  Controller.ButtonLDown.pressed(onevent_ControllerButtonLDown_pressed_0);\n  Controller.ButtonRDown.pressed(onevent_ControllerButtonRDown_pressed_0);\n\n  wait(15, msec);\n  whenStarted1();\n}","target":"Physical"}